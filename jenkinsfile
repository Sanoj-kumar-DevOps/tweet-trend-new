def registry = 'https://sunny007.jfrog.io'
def imageName = 'valaxy-docker-local/ttrend' // This should be the name of your Docker image
def version = '2.1.2'

pipeline {
    agent {
        node {
            label 'maven-slave'
        }
    }

    environment {
        PATH = "/opt/apache-maven-3.9.5/bin:$PATH"
    }

    stages {
        stage('Build') {
            steps {
                script {
                    sh 'mvn clean deploy -Dmaven.test.skip=true'
                }
            }
        }

        stage('Test') {
            steps {
                echo "------- unit test started --------"
                sh 'mvn surefire-report:report'
                echo "------- unit test completed --------"
            }
        }

        stage("Jar Publish") {
            steps {
                script {
                    echo '<--------------- Jar Publish Started --------------->'
                    def server = Artifactory.newServer url: registry + "/artifactory", credentialsId: "artifact-cred"
                    def properties = "buildid=${env.BUILD_ID};commitid=${GIT_COMMIT}"
                    
                    def uploadSpec = """
                    {
                        "files": [
                            {
                                "pattern": "jarstaging/*",
                                "target": "libs-release-local/{1}",
                                "flat": "false",
                                "props": "${properties}",
                                "exclusions": ["*.sha1", "*.md5"]
                            }
                        ]
                    }
                    """
                    
                    def buildInfo = Artifactory.newBuildInfo()
                    server.upload(uploadSpec, buildInfo)
                    server.publishBuildInfo(buildInfo)
                    
                    echo '<--------------- Jar Publish Ended --------------->'
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    echo '<--------------- Docker Build Started --------------->'
                    // Assuming Dockerfile is in the current directory
                    def app = docker.build("${imageName}:${version}")
                    echo '<--------------- Docker Build Ended --------------->'
                }
            }
        }

        stage("Docker Publish") {
            steps {
                script {
                    echo '<--------------- Docker Publish Started --------------->'  
                    docker.withRegistry(registry, 'artifact-cred') {
                        docker.image("${imageName}:${version}").push()
                    }    
                    echo '<--------------- Docker Publish Ended --------------->'  
                }
            }
        }

        // Uncomment this section if you want to include SonarQube analysis
        /*
        stage('SonarQube analysis') {
            environment {
                scannerHome = tool 'sonar-scanner'
            }

            steps {
                script {
                    withSonarQubeEnv('sonarqube-server') {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
        }
        */

       stage('Deploy k8s') {
        steps{
            sh './deploy.sh'
        }
       }
    }
}
